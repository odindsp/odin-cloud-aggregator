<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <context id="odinUserService" targetRuntime="MyBatis3" >
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖-->
        <property name="autoDelimitKeywords" value="false"/>

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- 指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号。 -->
        <property name="beginningDelimiter" value="`"/>

        <!-- 指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号。 -->
        <property name="endingDelimiter" value="`"/>

        <!-- 调用插件：为生成的Java模型创建一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />

        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <!-- 数据库连接配置：URL、用户名、密码 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://192.168.60.1:3306/tony?characterEncoding=utf8&amp;useSSL=true" userId="root" password="123456">
        </jdbcConnection>

        <!-- java类型处理器：用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl；注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 NUMERIC数据类型。-->
        <!-- 属性说明：
            [forceBigDecimals]
                false：默认,
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                    scale > 0; length > 18：使用BigDecimal;
                    scale = 0; length[10,18]：使用Long；
                    scale = 0; length[5,9]：使用Integer；
                    scale = 0; length < 5：使用Short；
         -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- java模型创建器：生成模型的包名和位置 -->
        <!-- 属性说明：
            [constructorBased]: 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；
            [enableSubPackages]: 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false；
            [rootClass]: 设置一个根对象，如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项。注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：1，属性名相同，类型相同，有相同的getter/setter方法；
            [trimStrings]: 设置是否在getter方法中，对String类型字段调用trim()方法；
        -->
        <javaModelGenerator targetPackage="com.pxene.odin.cloud.domain.model" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!-- SQL map的XML文件生成器：生成映射文件的包名和位置 -->
        <!-- 注意，在Mybatis3之后，我们可以使用mapper.xml文件 + Mapper接口（或者不用mapper接口），或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置 -->
        <!-- 属性说明：
            [enableSubPackages]: 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false
        -->
        <sqlMapGenerator targetPackage="com.pxene.odin.cloud.repository.basic" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- Mapper接口生成器：生成DAO或Mapper类的包名和位置 -->
        <!-- 属性说明：
            [type]: 选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1、ANNOTATEDMAPPER：会生成使用Mapper接口 + Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2、MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3、XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
                                    注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator type="ANNOTATEDMAPPER" targetPackage="com.pxene.odin.cloud.repository.basic" targetProject="src/main/java">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 选择一个table来生成相关文件 -->
        <!-- 属性说明：
            [ignoreQualifiersAtRuntime]: 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema；
            [constructorBased]: 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；
            [immutable]: 是否创建一个不可变的类，如果为true，那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类；
            [modelOnly]: 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素
            [runtimeCatalog]: 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog
            [runtimeSchema]: 那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema
            [runtimeTableName]: 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename
            [useActualColumnNames]: 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate
            [generatedKey]: 生成生成主键的策略，如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
                column：主键的列名；
                sqlStatement：要生成的selectKey语句，有以下可选项：
                    Cloudscape：相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                    DB2       ：相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                    DB2_MF    ：相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                    Derby     ：相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                    HSQLDB    ：相当于selectKey的SQL为：CALL IDENTITY()
                    Informix  ：相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                    MySql     ：相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                    SqlServer ：相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                    SYBASE    ：相当于selectKey的SQL为：SELECT @@IDENTITY
                    JDBC      ：相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
            [columnRenamingRule]：该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，如果使用了columnOverride元素，该属性无效；
            [columnOverride]: 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；column:要重新设置的列名；注意，一个table元素中可以有多个columnOverride元素
            [ignoreColumn]: 设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现。column:指定要忽略的列的名字；delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false。注意，一个table元素中可以有多个ignoreColumn元素
        -->
        <table tableName="odin_t_user" domainObjectName="UserModel" mapperName="UserMapper" enableCountByExample="true" enableUpdateByExample="true" enableDeleteByExample="true" enableSelectByExample="true" enableInsert="true" enableDeleteByPrimaryKey="true" enableUpdateByPrimaryKey="true" enableSelectByPrimaryKey="true" selectByPrimaryKeyQueryId="true" selectByExampleQueryId="true"></table>
    </context>
</generatorConfiguration>